import React from 'react';
import {Link} from 'react-router';
import classNames from 'classnames';
import jsonrpc from '../../util/jsonrpc';
import Immutable from 'immutable';
import {history} from '../../app-history';
import ExtractedStore from '../../stores/ExtractedStore';
import appdata from '../../appdata';

const applyRoot = appdata.get('applyRoot');


function writeupLookupMapper(writeups) {
    const mapper = (key, value) => value.get('id').toString();
    return writeups.toOrderedMap().mapKeys(mapper);
}

const formRowWrapper = function(visible, htmlFor, label, elem) {
    const labelEl = label ? (<label className="control-label" htmlFor={htmlFor}>{label}</label>) : null;
    return (
        <div className={classNames("form-group", {'hidden': !visible})}>
            {labelEl}
            {elem}
        </div>
    );
};

class FormInput extends React.Component {
    onChange(event) {
        let value = event.target.value;
        this.props.onChange(value);
    }

    render() {
        // TODO: allow id to be autogenerated if not passed in
        let id = 'FormRow-' + this.props['data-id'];
        let field = (<input type="text" className="form-control input-sm" id={id} value={this.props.value} onChange={this.onChange.bind(this)}/>);
        return formRowWrapper(this.props.visible, id, this.props.label, field);
    }
}

class FormSelect extends React.Component {
    onChange(event) {
        let value = event.target.value;
        this.props.onChange(value);
    }

    render() {
        // TODO: allow id to be autogenerated if not passed in
        let id = 'FormRow-' + this.props['data-id'];
        let field = (
            <select className="form-control input-sm" id={id} value={this.props.value} onChange={this.onChange.bind(this)}>
                {this.props.children}
            </select>
        );
        return formRowWrapper(this.props.visible, id, this.props.label, field);
    }
}

class ExtractedForm extends React.Component {
    constructor(props) {
        super(props);

        this.state = this.makeState(props);
    }

    makeState(props) {
        var state = {};
        state.data = Immutable.Map({
            selectedWriteup: '--',
            selectedWriteupPost: '--',
            writeinWriteupTitle: '',
            writeinWriteupAuthor: '',
            writeinWriteupPostTitle: ''
        });
        state.writeups = Immutable.fromJS(props.writeups);
        state.writeupLookup = writeupLookupMapper(state.writeups);
        return state;
    }

    componentWillReceiveProps(nextProps) {
        this.setState(this.makeState(nextProps));
    }


    selectChangeHandler(field) {
        return (value) => {
            this.setState({data: this.state.data.withMutations(state => {
                state.set(field, value);
                if (field === 'selectedWriteup') {
                    state.set('selectedWriteupPost', '--');
                    if (value === 'w') {
                        state.set('selectedWriteupPost', 'wp');
                        state.set('writeinWriteupTitle', '');
                        state.set('writeinWriteupAuthor', this.props.post.author);
                        state.set('writeinWriteupPostTitle', '');
                    }
                }
                if (field === 'selectedWriteupPost' && value === 'wp') {
                    state.set('writeinWriteupPostTitle', '');
                }
            })});
        };
    }

    changeHandler(field) {
        return (value) => {
            this.setState({data: this.state.data.set(field, value)});
        };
    }

    clickHandler() {
        return (evt) => {
            evt.preventDefault();
            const state = this.state.data;
            const target = Immutable.Map().withMutations(target => {
                if (state.get('selectedWriteup') !== 'w') {
                    target.set('w_id', state.get('selectedWriteup'));
                } else {
                    target.set('w_title', state.get('writeinWriteupTitle'));
                    target.set('w_author', state.get('writeinWriteupAuthor'));
                }
                if (state.get('selectedWriteupPost') !== 'wp') {
                    target.set('wp_index', state.get('selectedWriteupPost'));
                } else {
                    target.set('wp_title', state.get('writeinWriteupPostTitle'));
                }
            }).toJSON();
            jsonrpc('attach_extracted', [this.props.post.id, target]).then((resp) => {
                history.pushState(null, applyRoot(`writeup/${resp.writeup_id}/post/${resp.post_index}`));
            });
        };
    }

    deleteHandler() {
        return (evt) => {
            evt.preventDefault();
            jsonrpc('delete_extracted', [this.props.post.id]).then(() => {
                ExtractedStore.fetchExtractedPosts();
            });
        };
    }

    render() {
        const state = this.state.data;
        let writeupSelect = (
            <FormSelect data-id="selected-writeup" label="Writeup" value={state.get('selectedWriteup')} onChange={this.selectChangeHandler('selectedWriteup')} visible={true}>
                <option value="--" disabled="disabled">-- Choose --</option>
                <option value="w">New Writeup</option>
                <option value="--2" disabled="disabled">--</option>
                {this.props.writeups.map((writeup) => {
                    // This works around a weird issue in react-devtools. see https://github.com/facebook/react-devtools/issues/248
                    let optText = `${writeup.title} - ${writeup.author_slug} - ${writeup.status}`;
                    return (<option key={writeup.id} value={writeup.id}>{optText}</option>);
                 })}
            </FormSelect>
        );
        const selectedWriteupDetails = this.state.writeupLookup.get(state.get('selectedWriteup'));
        const wps = selectedWriteupDetails ? selectedWriteupDetails.get('posts').toJS() : [];

        let writeupPostSelect = (
            <FormSelect data-id='selected-post' label="Post" value={state.get('selectedWriteupPost')} onChange={this.selectChangeHandler('selectedWriteupPost')} visible={!!selectedWriteupDetails}>
                <option value="--" disabled="disabled">-- Choose --</option>
                <option value="wp">New Post</option>
                <option value="--2" disabled="disabled">--</option>
                {wps.map((wp) => {
                    let optText = `${wp.ordinal} - ${wp.title} - ${wp.author}`;
                    return (<option key={wp.index} value={wp.index}>{optText}</option>);
                 })}
            </FormSelect>
        );

        const activeButton = state.every((value, key) => {
            const wval = state.get('selectedWriteup');
            const wpval = state.get('selectedWriteupPost');
            switch (key) {
                case 'selectedWriteup':
                    return (value !== '--');
                case 'selectedWriteupPost':
                    return (wval === 'w' || value !== '--');
                case 'writeinWriteupTitle':
                    return ((wval === 'w' && value !== '') ||
                            (wval !== 'w'));
                case 'writeinWriteupAuthor':
                    return ((wval === 'w' && value !== '') ||
                            (wval !== 'w'));
                case 'writeinWriteupPostTitle':
                    return ((wpval === 'wp' && value !== '') ||
                            (wval === 'w' && value !== '') ||
                            (wval !== 'w' && wpval !== 'wp'));
                default:
                    return false;
            }
        });

        return (
            <div className="well">
                {writeupSelect}
                <FormInput data-id="title" label="New Writeup Title" visible={state.get('selectedWriteup') === 'w'} value={state.get('writeinWriteupTitle')} onChange={this.changeHandler('writeinWriteupTitle')} />
                <FormInput data-id="author" label="New Writeup Author" visible={state.get('selectedWriteup') === 'w'} value={state.get('writeinWriteupAuthor')} onChange={this.changeHandler('writeinWriteupAuthor')} />
                {writeupPostSelect}
                <FormInput data-id="posttitle" label="New Post Title" visible={state.get('selectedWriteup') === 'w' || state.get('selectedWriteupPost') === 'wp'} value={state.get('writeinWriteupPostTitle')} onChange={this.changeHandler('writeinWriteupPostTitle')} />
                <button onClick={this.clickHandler()} type="button" className="btn btn-success" disabled={(!activeButton) ? "disabled" : null}>Do it</button>
                <button onClick={this.deleteHandler()} type="button" className="btn btn-danger pull-right">Delete</button>
            </div>
        );
    }
}

class ExtractedPost extends React.Component {
    constructor(props) {
        super(props);
        this.state = {
            expanded: false
        };
    }

    toggleHandler() {
        return (evt) => {
            evt.preventDefault();
            this.setState({expanded: !this.state.expanded});
        };
    }

    getHtmlView() {
        return {
            __html: this.props.post.html
        };
    }

    render() {
        if (!this.props.writeups || !this.props.post) {
            return null;
        }
        const panelClass = classNames('panel-body', 'collapse', {'in': this.state.expanded});
        const buttonClass = classNames('fa', 'fa-lg', this.state.expanded ? 'fa-minus-circle' : 'fa-plus-circle');
        return (
            <div className="panel panel-default">
                <div className="panel-heading">
                    <ul className="list-inline">
                        <li>{this.props.post.author}</li>
                        <li>{this.props.post.edit_summary}</li>
                        <li>{this.props.post.created_at}</li>
                        <li className="pull-right"><a role="button" href="#" onClick={this.toggleHandler()}><span className={buttonClass}></span></a></li>
                    </ul>
                </div>
                <div className={panelClass}>
                    <ExtractedForm writeups={this.props.writeups} post={this.props.post} />
                    <div className="well" dangerouslySetInnerHTML={this.getHtmlView()}></div>
                </div>
            </div>
        );
    }
}


export class ExtractedList extends React.Component {
    render() {
        return (
            <div>
                {this.props.extracted.extractedPosts.map((ep) => {
                    return (<ExtractedPost key={ep.id} post={ep} writeups={this.props.writeups.writeups} />);
                 })}
            </div>
        );
    }
}
